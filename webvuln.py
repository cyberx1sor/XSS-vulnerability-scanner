import requests
import re
from urllib.parse import urlparse, urljoin
import colorama
from colorama import Fore, Style

colorama.init()

visited_urls = set()

def extract_internal_links(url):
    internal_links = set()
    response = requests.get(url)
    if response.status_code == 200:
        page_content = response.text
        base_url = get_base_url(url)
        links = re.findall(r'href=[\'"](.*?)[\'"]', page_content, flags=re.IGNORECASE)
        for link in links:
            absolute_link = urljoin(base_url, link.strip())
            if is_same_domain(absolute_link, base_url):
                internal_links.add(absolute_link)
    return internal_links

def get_base_url(url):
    parsed_url = urlparse(url)
    base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
    return base_url

def is_same_domain(url, base_url):
    parsed_url = urlparse(url)
    parsed_base_url = urlparse(base_url)
    return parsed_url.netloc == parsed_base_url.netloc

def perform_xss_checks_input(url, input_fields):
    payloads = ['<script>alert("XSS")</script>', '<img src="x" onerror="alert(\'XSS\')">']
    for input_field in input_fields:
        vulnerable = False
        for payload in payloads:
            modified_input_field = re.sub(r'value\s*?=\s*?".*?"', f'value="{payload}"', input_field, flags=re.IGNORECASE)
            modified_input_field = re.sub(r'value\s*?=\s*?\'.*?\'', f"value='{payload}'", modified_input_field, flags=re.IGNORECASE)
            modified_input_field = re.sub(r'value\s*?=\s*?{.*?}', f'value={payload}', modified_input_field, flags=re.IGNORECASE)
            if payload in modified_input_field:
                vulnerable = True
                break
        if vulnerable:
            print(f'{Fore.RED}Vulnerable{Style.RESET_ALL}: {input_field} in {url}')
        else:
            print(f'Secure: {input_field} in {url}')

def perform_xss_checks_textarea(url, textarea_fields):
    payloads = ['<script>alert("XSS")</script>', '<img src="x" onerror="alert(\'XSS\')">']
    for textarea_field in textarea_fields:
        vulnerable = False
        for payload in payloads:
            modified_textarea_field = re.sub(r'>(.*?)</textarea>', f'>{payload}</textarea>', textarea_field, flags=re.IGNORECASE)
            if payload in modified_textarea_field:
                vulnerable = True
                break
        if vulnerable:
            print(f'{Fore.RED}Vulnerable{Style.RESET_ALL}: {textarea_field} in {url}')
        else:
            print(f'Secure: {textarea_field} in {url}')

    internal_links = extract_internal_links(url)

    for link in internal_links:
        if link not in visited_urls:
            visited_urls.add(link)
            perform_xss_checks(link)

def perform_xss_checks(url):
    response = requests.get(url)
    if response.status_code == 200:
        page_content = response.text
        input_fields = re.findall(r'<input.*?type=["\']text["\'].*?>', page_content, flags=re.IGNORECASE)
        textarea_fields = re.findall(r'<textarea.*?>.*?</textarea>', page_content, flags=re.IGNORECASE)
        perform_xss_checks_input(url, input_fields)
        perform_xss_checks_textarea(url, textarea_fields)

url = input("Enter a URL: ")

perform_xss_checks(url)
